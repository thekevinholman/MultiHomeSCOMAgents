<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>SCOM.MultiHome</ID>
      <Version>1.0.1.2</Version>
    </Identity>
    <Name>SCOM.MultiHome</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="SCOM.MultiHome.GW1.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW2.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW3.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW4.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW5.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW6.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW7.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW8.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW9.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="SCOM.MultiHome.GW10.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />		
        <ClassType ID="SCOM.MultiHome.NotGWAssigned.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />		
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="SCOM.MultiHome.GW1.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW1.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW1.Group" />
          <Target ID="SCOM.MultiHome.GW1.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW2.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW2.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW2.Group" />
          <Target ID="SCOM.MultiHome.GW2.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW3.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW3.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW3.Group" />
          <Target ID="SCOM.MultiHome.GW3.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW4.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW4.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW4.Group" />
          <Target ID="SCOM.MultiHome.GW4.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW5.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW5.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW5.Group" />
          <Target ID="SCOM.MultiHome.GW5.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW6.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW6.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW6.Group" />
          <Target ID="SCOM.MultiHome.GW6.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW7.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW7.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW7.Group" />
          <Target ID="SCOM.MultiHome.GW7.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW8.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW8.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW8.Group" />
          <Target ID="SCOM.MultiHome.GW8.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW9.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW9.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW9.Group" />
          <Target ID="SCOM.MultiHome.GW9.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>	
        <RelationshipType ID="SCOM.MultiHome.GW10.Group.Contains.Agents" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="SCOM.MultiHome.GW10.Group.Rel.Source" MinCardinality="0" MaxCardinality="2147483647" Type="SCOM.MultiHome.GW10.Group" />
          <Target ID="SCOM.MultiHome.GW10.Group.Rel.Target" MinCardinality="0" MaxCardinality="2147483647" Type="SC!Microsoft.SystemCenter.Agent" />
		</RelationshipType>			
      </RelationshipTypes>
    </EntityTypes>  
    <ModuleTypes>
      <DataSourceModuleType ID="SCOM.MultiHome.AddMG.Rule.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SpreadInitializationOverInterval" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.TriggerData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="SCOM.MultiHome.AddMG.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" name="MGtoADD" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="MStoASSIGN" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="MGtoADD" Selector="$Config/MGtoADD$" ParameterType="string" />
          <OverrideableParameter ID="MStoASSIGN" Selector="$Config/MStoASSIGN$" ParameterType="string" />		  
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
            <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
            <ScriptName>SCOM.MultiHome.AddMG.Rule.WA.ps1</ScriptName>
            <ScriptBody>
#=================================================================================
#  Multi-Home Agents to a new SCOM Management Group if not assigned to it yet
#
#  Author: Kevin Holman
#  v1.6
#=================================================================================
param([string]$MGtoADD, [string]$MStoASSIGN)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $MGtoADD = "MGNAME"
# $MStoASSIGN = "ManagementServerName.domain.com"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.MultiHome.AddMG.Rule.WA.ps1"
$EventID = "1300"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting. `n Running as ($whoami). `nParameters passed: `nMG to ADD: ($MGtoADD). `nMS to ASSIGN: ($MStoASSIGN).")
#=================================================================================


# Begin MAIN script section
#=================================================================================

#Check to see if defaults were not changed and stop
IF ($MGtoADD -eq "MGNAME" -or $MStoASSIGN -eq "ManagementServerName.domain.com")
{
  #The default value for the management group name or management server name was not changed via override.  This is a misconfiguration.  Log critical event and terminate.
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: Invalid MGNAME or MSNAME was used. `nMG to ADD: ($MGtoADD). `nMS to ASSIGN: ($MStoASSIGN). `nTerminating script.")
  EXIT
}

# Load SCOM Agent Scripting Module
$Error.Clear()
$AgentCfg = New-Object -ComObject "AgentConfigManager.MgmtSvcCfg"

IF ($Error)
{
  #Error loading agent scripting object
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: Attempting to load the SCOM Agent scripting objects. `nError is ($Error). `nTerminating script.")
  EXIT
}
			
# Get Agent Management groups 
$MGs = $AgentCfg.GetManagementGroups()

IF (!($MGs))
{
  #No management groups were gathered.  Something broke.  Log critical event and terminate
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: No management groups were found on this agent, which means a scripting error. `nTerminating script.")
  EXIT
}

[array]$MGListArr = @()
[string]$MGListStr = ""

#Loop through each and create an array and comma seperated list
foreach ($MG in $MGs)
{
  $AgentMGName = $MG.managementGroupName.ToUpper()
  $MGListArr = $MGListArr + $AgentMGName
  $MGListStr = $MGListStr + $AgentMGName + ", "
}
$MGlistStr = $MGlistStr.TrimEnd(", ")


IF ($MGListArr -notcontains $MGtoADD)
{
  #The agent is not multi-homed yet.  Multihome it.
  #Check to see how many management groups are already homed.
  $MGListCount = $MGListArr.Count
  IF ($MGListCount -ge 4)
  {
    #The agent is already multihomed to 4 management groups  Log a bad event and output the names of the MGs
    $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: 4 Management Groups are already homed to this agent. No more can be added. `nTerminating script.")
    EXIT
  }
  ELSE
  {
    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nMultihoming this agent to MG: ($MGtoADD) and MS: ($MStoASSIGN).")
    $AgentCfg.AddManagementGroup($MGtoADD,$MStoASSIGN,5723)
    $RestartRequired = $true
  }
}
ELSE
{
  #The agent is already multihomed to the intended management group. Do nothing. Log event.
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nThis agent is already multihomed to Management Group: ($MGtoADD). `nThe MG List on this agent is: ($MGlistStr). `nNo changes will be made.")
}
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript Completed. `nScript Runtime: ($ScriptTime) seconds.")
#=================================================================================


IF ($RestartRequired)
{
  # Restart Agent
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nA change to the agent management group membership was made and a restart of the agent is required. `nRestarting now.")
  #=================================================================================
  #We need a reliable way to restart the SCOM Agent out of band so that tasks can complete with success
  $Command = "Start-Sleep -s 5;Restart-Service HealthService"
  $Process = ([wmiclass]"root\cimv2:Win32_ProcessStartup").CreateInstance()
  $Process.ShowWindow = 0
  $Process.CreateFlags = 16777216
  ([wmiclass]"root\cimv2:Win32_Process").Create("powershell.exe $Command")|Out-Null
  #=================================================================================
}
#End of Script
            </ScriptBody>
            <Parameters>
              <Parameter>
                <Name>MGtoADD</Name>
                <Value>$Config/MGtoADD$</Value>
              </Parameter>
			  <Parameter>
                <Name>MStoASSIGN</Name>
                <Value>$Config/MStoASSIGN$</Value>
              </Parameter>
            </Parameters>
            <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
          </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>	  
    </ModuleTypes>	
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>  
      <Discovery ID="SCOM.MultiHome.GW1.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW1.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW1.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW1.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1301"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW1.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW1.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW1.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW1.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW2.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW2.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW2.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW2.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1302"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW2.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW2.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW2.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW2.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW3.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW3.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW3.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW3.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1303"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW3.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW3.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW3.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW3.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW4.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW4.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW4.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW4.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1304"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW4.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW4.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW4.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW4.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW5.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW5.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW5.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW5.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1305"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW5.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW5.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW5.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW5.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW6.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW6.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW6.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW6.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1306"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW6.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW6.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW6.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW6.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW7.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW7.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW7.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW7.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1307"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW7.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW7.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW7.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW7.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW8.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW8.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW8.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW8.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1308"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW8.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW8.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW8.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW8.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW9.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW9.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW9.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW9.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1309"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW9.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW9.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW9.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW9.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.GW10.Group.Discovery" Enabled="false" Target="SCOM.MultiHome.GW10.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="SCOM.MultiHome.GW10.Group" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86331</IntervalSeconds>
          <SyncTime />
          <ScriptName>SCOM.MultiHome.GW10.Group.Discovery.ps1</ScriptName>
          <ScriptBody>
#=================================================================================
#  Group Population script based on PowerShell
#
#  Kevin Holman
#  v1.0
#=================================================================================
param($SourceID, $ManagedEntityID, [string]$GroupDisplayName)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $SourceId = '{00000000-0000-0000-0000-000000000000}'
# $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
# [string]$GroupDisplayName = "Gateway DMZOMGW1 Assigned Agents Group"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
#Get the Gateway Name
$GroupDisplayNameSplit = $GroupDisplayName.Split(" ")
[string]$GWNetBIOSName = $GroupDisplayNameSplit[1]

# Assign script name variable for use in event logging
$ScriptName = "SCOM.MultiHome." + $GWNetBIOSName + ".Group.Discovery.ps1"
$EventID = "1310"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load SCOM Discovery module
$DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
#Set variables to be used in logging events
$whoami = whoami
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting for group: ($GroupDisplayName). `nRunning as ($whoami).")
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Failure loading OperationsManager module or unable to connect to the management server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get the gateway object
$Gateway = Get-SCOMManagementServer | where {$_.ComputerName –eq $GWNetBIOSName}
$Agents = Get-SCOMAgent -ManagementServer $Gateway

###Discovery Section
#Set the group instance ID
[string]$GroupInstanceID = "SCOM.MultiHome.GW10.Group"
#Set the Relationship instance ID
[string]$RelationshipInstanceID = "SCOM.MultiHome.GW10.Group.Contains.Agents"

#Set the group instance we will discover members of
$GroupInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SCOM.MultiHome.GW10.Group']$")

# Loop through each Name and add a group membership containment relationship to the discovery data
$i=0;
FOREACH ($Agent in $Agents)
{
  [string]$AgentName = $Agent.Name
  $i = $i+1
  $ServerInstance = $DiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.Agent']$")
  $ServerInstance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $AgentName) 
  $RelationshipInstance = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='SCOM.MultiHome.GW10.Group.Contains.Agents']$")
  $RelationshipInstance.Source = $GroupInstance
  $RelationshipInstance.Target = $ServerInstance
  $DiscoveryData.AddInstance($RelationshipInstance)   
}

IF ($i -ge 1)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nSuccessfully found ($i) Agents to add to the group: ($GroupInstanceID).")
}
ELSE
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nERROR: No Agents were found for Gateway: ($GWNetBIOSName). `nTerminating script.")
  EXIT
}

# Return Discovery Items Normally           
 $DiscoveryData

# Return Discovery Bag to the command line for testing (does not work from ISE)
# $momapi.Return($DiscoveryData)
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Ending. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
#End Script
		  </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>GroupDisplayName</Name>
              <Value>$Target/Property[Type="System!System.Entity"]/DisplayName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="SCOM.MultiHome.NotGWAssigned.Group.Discovery" Enabled="true" Target="SCOM.MultiHome.NotGWAssigned.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="SCOM.MultiHome.NotGWAssigned.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SC!Microsoft.SystemCenter.Agent"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
                 <Expression>
				   <And>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW1.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW2.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW3.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW4.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW5.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>	
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW6.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW7.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW8.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW9.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>
                     <Expression>				 
                        <NotContained>
                            <MonitoringClass>$MPElement[Name="SCOM.MultiHome.GW10.Group"]$</MonitoringClass>
                        </NotContained>
                     </Expression>						 
				   </And>
			     </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
    </Discoveries>  
    <Rules>
      <Rule ID="SCOM.MultiHome.AddMG.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="Scheduler" TypeID="SCOM.MultiHome.AddMG.Rule.DS">
            <IntervalSeconds>86400</IntervalSeconds>
            <SpreadInitializationOverInterval>86400</SpreadInitializationOverInterval>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="SCOM.MultiHome.AddMG.Rule.WA">
            <MGtoADD>MGNAME</MGtoADD>		  
            <MStoASSIGN>ManagementServerName.domain.com</MStoASSIGN>
            <TimeoutSeconds>120</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesWildcard</Operator>
                    <Pattern>13##</Pattern>
                  </RegExExpression>
                </Expression>			  
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="Integer">EventLevel</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(1|2)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesWildcard</Operator>
                    <Pattern>SCOM.MultiHome</Pattern>
                  </RegExExpression>
                </Expression>				
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>	  
    </Rules>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage" />
    </StringResources>  
  </Presentation>  
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SCOM.MultiHome">
          <Name>SCOM MultiHome</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule">
          <Name>SCOM MultiHome AddMG Script Error Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage">
          <Name>Error running a SCOM MultiHome AddMG Script</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>			
        <DisplayString ElementID="SCOM.MultiHome.AddMG.Rule">
          <Name>SCOM MultiHome Agent to Additional Management Group Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW1.Group">
          <Name>Gateway GW1 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW1.Group.Discovery">
          <Name>Gateway GW1 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW2.Group">
          <Name>Gateway GW2 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW2.Group.Discovery">
          <Name>Gateway GW2 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW3.Group">
          <Name>Gateway GW3 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW3.Group.Discovery">
          <Name>Gateway GW3 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW4.Group">
          <Name>Gateway GW4 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW4.Group.Discovery">
          <Name>Gateway GW4 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW5.Group">
          <Name>Gateway GW5 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW5.Group.Discovery">
          <Name>Gateway GW5 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW6.Group">
          <Name>Gateway GW6 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW6.Group.Discovery">
          <Name>Gateway GW6 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW7.Group">
          <Name>Gateway GW7 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW7.Group.Discovery">
          <Name>Gateway GW7 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW8.Group">
          <Name>Gateway GW8 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW8.Group.Discovery">
          <Name>Gateway GW8 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW9.Group">
          <Name>Gateway GW9 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW9.Group.Discovery">
          <Name>Gateway GW9 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW10.Group">
          <Name>Gateway GW10 Assigned Agents Group</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.GW10.Group.Discovery">
          <Name>Gateway GW10 Assigned Agents Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.NotGWAssigned.Group">
          <Name>All Agents NOT Assigned to Gateways Group</Name>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>