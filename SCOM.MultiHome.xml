<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>SCOM.MultiHome</ID>
      <Version>1.0.0.4</Version>
    </Identity>
    <Name>SCOM.MultiHome</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="SCOM.MultiHome.AddMG.Rule.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SpreadInitializationOverInterval" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SpreadInitializationOverInterval>$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.TriggerData</OutputType>
      </DataSourceModuleType>	
      <WriteActionModuleType ID="SCOM.MultiHome.AddMG.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" name="MGtoADD" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="MStoASSIGN" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="MGtoADD" Selector="$Config/MGtoADD$" ParameterType="string" />
          <OverrideableParameter ID="MStoASSIGN" Selector="$Config/MStoASSIGN$" ParameterType="string" />		  
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
            <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
            <ScriptName>SCOM.MultiHome.AddMG.Rule.WA.ps1</ScriptName>
            <ScriptBody>
#=================================================================================
#  Multi-Home Agents to a new SCOM Management Group if not assigned to it yet
#
#  Author: Kevin Holman
#  v1.5
#=================================================================================
param([string]$MGtoADD, [string]$MStoASSIGN)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $MGtoADD = "MGNAME"
# $MStoASSIGN = "ManagementServerName.domain.com"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.MultiHome.AddMG.Rule.WA.ps1"
$EventID = "7502"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting. `n Running as ($whoami). `nParameters passed: `nMG to ADD: ($MGtoADD). `nMS to ASSIGN: ($MStoASSIGN).")
#=================================================================================


# Begin MAIN script section
#=================================================================================

#Check to see if defaults were not changed and stop
IF ($MGtoADD -eq "MGNAME" -or $MStoASSIGN -eq "ManagementServerName.domain.com")
{
  #The default value for the management group name or management server name was not changed via override.  This is a misconfiguration.  Log critical event and terminate.
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: Invalid MGNAME or MSNAME was used. `nMG to ADD: ($MGtoADD). `nMS to ASSIGN: ($MStoASSIGN). `nTerminating script.")
  EXIT
}

# Load SCOM Agent Scripting Module
$Error.Clear()
$AgentCfg = New-Object -ComObject "AgentConfigManager.MgmtSvcCfg"

IF ($Error)
{
  #Error loading agent scripting object
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: Attempting to load the SCOM Agent scripting objects. `nError is ($Error). `nTerminating script.")
  EXIT
}
			
# Get Agent Management groups 
$MGs = $AgentCfg.GetManagementGroups()

IF (!($MGs))
{
  #No management groups were gathered.  Something broke.  Log critical event and terminate
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: No management groups were found on this agent, which means a scripting error. `nTerminating script.")
  EXIT
}

[array]$MGListArr = @()
[string]$MGListStr = ""

#Loop through each and create an array and comma seperated list
foreach ($MG in $MGs)
{
  $AgentMGName = $MG.managementGroupName.ToUpper()
  $MGListArr = $MGListArr + $AgentMGName
  $MGListStr = $MGListStr + $AgentMGName + ", "
}
$MGlistStr = $MGlistStr.TrimEnd(", ")


IF ($MGListArr -notcontains $MGtoADD)
{
  #The agent is not multi-homed yet.  Multihome it.
  #Check to see how many management groups are already homed.
  $MGListCount = $MGListArr.Count
  IF ($MGListCount -ge 4)
  {
    #The agent is already multihomed to 4 management groups  Log a bad event and output the names of the MGs
    $momapi.LogScriptEvent($ScriptName,$EventID,1,"`nFATAL ERROR: 4 Management Groups are already homed to this agent. No more can be added. `nTerminating script.")
    EXIT
  }
  ELSE
  {
    $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nMultihoming this agent to MG: ($MGtoADD) and MS: ($MStoASSIGN).")
    $AgentCfg.AddManagementGroup($MGtoADD,$MStoASSIGN,5723)
    $RestartRequired = $true
  }
}
ELSE
{
  #The agent is already multihomed to the intended management group. Do nothing. Log event.
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nThis agent is already multihomed to Management Group: ($MGtoADD). `nThe MG List on this agent is: ($MGlistStr). `nNo changes will be made.")
}
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript Completed. `nScript Runtime: ($ScriptTime) seconds.")
#=================================================================================


IF ($RestartRequired)
{
  # Restart Agent
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`nA change to the agent management group membership was made and a restart of the agent is required. `nRestarting now.")
  #=================================================================================
  #We need a reliable way to restart the SCOM Agent out of band so that tasks can complete with success
  $Command = "Start-Sleep -s 5;Restart-Service HealthService"
  $Process = ([wmiclass]"root\cimv2:Win32_ProcessStartup").CreateInstance()
  $Process.ShowWindow = 0
  $Process.CreateFlags = 16777216
  ([wmiclass]"root\cimv2:Win32_Process").Create("powershell.exe $Command")|Out-Null
  #=================================================================================
}
#End of Script
            </ScriptBody>
            <Parameters>
              <Parameter>
                <Name>MGtoADD</Name>
                <Value>$Config/MGtoADD$</Value>
              </Parameter>
			  <Parameter>
                <Name>MStoASSIGN</Name>
                <Value>$Config/MStoASSIGN$</Value>
              </Parameter>
            </Parameters>
            <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
          </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>	  
    </ModuleTypes>	
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="SCOM.MultiHome.AddMG.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="Scheduler" TypeID="SCOM.MultiHome.AddMG.Rule.DS">
            <IntervalSeconds>86400</IntervalSeconds>
            <SpreadInitializationOverInterval>86400</SpreadInitializationOverInterval>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="SCOM.MultiHome.AddMG.Rule.WA">
            <MGtoADD>MGNAME</MGtoADD>		  
            <MStoASSIGN>ManagementServerName.domain.com</MStoASSIGN>
            <TimeoutSeconds>120</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
			    <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">7502</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="Integer">EventLevel</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(1|2)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>	  
    </Rules>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage" />
    </StringResources>  
  </Presentation>  
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SCOM.MultiHome">
          <Name>SCOM MultiHome</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule">
          <Name>SCOM MultiHome AddMG Script Error Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.MultiHome.AddMG.AlertOnScriptError.Rule.AlertMessage">
          <Name>Error running a SCOM MultiHome AddMG Script</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>			
        <DisplayString ElementID="SCOM.MultiHome.AddMG.Rule">
          <Name>SCOM MultiHome Agent to Additional Management Group Rule</Name>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>